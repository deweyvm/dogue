<?xml version="1.0" encoding="UTF-8"?>
<project name="whatever" default="all">
  
  
  <property file="whatever.properties"/>
  <!-- Uncomment the following property if no tests compilation is needed -->
  <!-- 
  <property name="skip.tests" value="true"/>
   -->
  
  <!-- Compiler options -->
  
  <property name="compiler.debug" value="on"/>
  <property name="compiler.generate.no.warnings" value="off"/>
  <property name="compiler.args" value=""/>
  <property name="compiler.max.memory" value="256m"/>
  <patternset id="ignored.files">
    <exclude name="**/CVS/**"/>
    <exclude name="**/SCCS/**"/>
    <exclude name="**/RCS/**"/>
    <exclude name="**/rcs/**"/>
    <exclude name="**/.DS_Store/**"/>
    <exclude name="**/.svn/**"/>
    <exclude name="**/.pyc/**"/>
    <exclude name="**/.pyo/**"/>
    <exclude name="**/*.pyc/**"/>
    <exclude name="**/*.pyo/**"/>
    <exclude name="**/.git/**"/>
    <exclude name="**/*.hprof/**"/>
    <exclude name="**/_svn/**"/>
    <exclude name="**/.hg/**"/>
    <exclude name="**/*.lib/**"/>
    <exclude name="**/*~/**"/>
    <exclude name="**/__pycache__/**"/>
    <exclude name="**/.bundle/**"/>
    <exclude name="**/*.rbc/**"/>
  </patternset>
  <patternset id="library.patterns">
    <include name="*.zip"/>
    <include name="*.apk"/>
    <include name="*.war"/>
    <include name="*.egg"/>
    <include name="*.ear"/>
    <include name="*.ane"/>
    <include name="*.swc"/>
    <include name="*.jar"/>
  </patternset>
  <patternset id="compiler.resources">
    <exclude name="**/?*.java"/>
    <exclude name="**/?*.form"/>
    <exclude name="**/?*.class"/>
    <exclude name="**/?*.groovy"/>
    <exclude name="**/?*.scala"/>
    <exclude name="**/?*.flex"/>
    <exclude name="**/?*.kt"/>
    <exclude name="**/?*.clj"/>
  </patternset>
  
  <!-- JDK definitions -->
  
  <property name="jdk.bin.1.7" value="${jdk.home.1.7}/bin"/>
  <path id="jdk.classpath.1.7">
    <fileset dir="${jdk.home.1.7}">
      <include name="jre/lib/charsets.jar"/>
      <include name="jre/lib/deploy.jar"/>
      <include name="jre/lib/javaws.jar"/>
      <include name="jre/lib/jce.jar"/>
      <include name="jre/lib/jfr.jar"/>
      <include name="jre/lib/jfxrt.jar"/>
      <include name="jre/lib/jsse.jar"/>
      <include name="jre/lib/management-agent.jar"/>
      <include name="jre/lib/plugin.jar"/>
      <include name="jre/lib/resources.jar"/>
      <include name="jre/lib/rt.jar"/>
      <include name="jre/lib/ext/access-bridge-64.jar"/>
      <include name="jre/lib/ext/dnsns.jar"/>
      <include name="jre/lib/ext/jaccess.jar"/>
      <include name="jre/lib/ext/localedata.jar"/>
      <include name="jre/lib/ext/sunec.jar"/>
      <include name="jre/lib/ext/sunjce_provider.jar"/>
      <include name="jre/lib/ext/sunmscapi.jar"/>
      <include name="jre/lib/ext/zipfs.jar"/>
    </fileset>
  </path>
  
  <property name="project.jdk.home" value="${jdk.home.1.7}"/>
  <property name="project.jdk.bin" value="${jdk.bin.1.7}"/>
  <property name="project.jdk.classpath" value="jdk.classpath.1.7"/>
  
  
  <!-- Project Libraries -->
  
  <path id="library.libs.classpath">
    <fileset dir="${basedir}/../gleany/gleany/libs">
      <patternset refid="library.patterns"/>
    </fileset>
  </path>
  
  <path id="library.scala-library.classpath">
    <pathelement location="${basedir}/../../../../../Program Files (x86)/scala/lib/scala-actors.jar"/>
    <pathelement location="${basedir}/../../../../../Program Files (x86)/scala/lib/scala-library.jar"/>
    <pathelement location="${basedir}/../../../../../Program Files (x86)/scala/lib/scala-swing.jar"/>
  </path>
  
  
  <!-- Global Libraries -->
  
  <path id="library.scala-compiler.classpath">
    <pathelement location="C:/Program Files (x86)/scala/lib/scala-compiler.jar"/>
    <pathelement location="C:/Program Files (x86)/scala/lib/scala-library.jar"/>
    <pathelement location="C:/Program Files (x86)/scala/lib/scala-reflect.jar"/>
  </path>
  
  <path id="library.scala-library.classpath">
    <pathelement location="C:/Program Files (x86)/scala/lib/scala-actors.jar"/>
    <pathelement location="C:/Program Files (x86)/scala/lib/scala-library.jar"/>
    <pathelement location="C:/Program Files (x86)/scala/lib/scala-swing.jar"/>
  </path>
  
  <!-- Modules -->
  
  
  <!-- Module gleany -->
  
  <dirname property="module.gleany.basedir" file="${ant.file}"/>
  
  
  <property name="module.jdk.home.gleany" value="${project.jdk.home}"/>
  <property name="module.jdk.bin.gleany" value="${project.jdk.bin}"/>
  <property name="module.jdk.classpath.gleany" value="${project.jdk.classpath}"/>
  
  <property name="compiler.args.gleany" value="${compiler.args}"/>
  
  <property name="gleany.output.dir" value="${module.gleany.basedir}/out/production/gleany"/>
  <property name="gleany.testoutput.dir" value="${module.gleany.basedir}/out/test/gleany"/>
  
  <path id="gleany.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="gleany.module.production.classpath">
    <path refid="${module.jdk.classpath.gleany}"/>
    <path refid="library.libs.classpath"/>
    <pathelement location="${basedir}/../../../../../Program Files (x86)/scala/lib/scala-library.jar"/>
  </path>
  
  <path id="gleany.runtime.production.module.classpath">
    <pathelement location="${gleany.output.dir}"/>
    <path refid="library.libs.classpath"/>
    <pathelement location="${basedir}/../../../../../Program Files (x86)/scala/lib/scala-library.jar"/>
  </path>
  
  <path id="gleany.module.classpath">
    <path refid="${module.jdk.classpath.gleany}"/>
    <pathelement location="${gleany.output.dir}"/>
    <path refid="library.libs.classpath"/>
    <pathelement location="${basedir}/../../../../../Program Files (x86)/scala/lib/scala-library.jar"/>
  </path>
  
  <path id="gleany.runtime.module.classpath">
    <pathelement location="${gleany.testoutput.dir}"/>
    <pathelement location="${gleany.output.dir}"/>
    <path refid="library.libs.classpath"/>
    <pathelement location="${basedir}/../../../../../Program Files (x86)/scala/lib/scala-library.jar"/>
  </path>
  
  
  <patternset id="excluded.from.module.gleany">
    <patternset refid="ignored.files"/>
  </patternset>
  
  <patternset id="excluded.from.compilation.gleany">
    <patternset refid="excluded.from.module.gleany"/>
  </patternset>
  
  <path id="gleany.module.sourcepath">
    <dirset dir="${module.gleany.basedir}/../gleany/gleany">
      <include name="src"/>
    </dirset>
  </path>
  
  
  <target name="compile.module.gleany" depends="compile.module.gleany.production,compile.module.gleany.tests" description="Compile module gleany"/>
  
  <target name="compile.module.gleany.production" description="Compile module gleany; production classes">
    <mkdir dir="${gleany.output.dir}"/>
    <javac destdir="${gleany.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true" executable="${module.jdk.bin.gleany}/javac">
      <compilerarg line="${compiler.args.gleany}"/>
      <bootclasspath refid="gleany.module.bootclasspath"/>
      <classpath refid="gleany.module.production.classpath"/>
      <src refid="gleany.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.gleany"/>
    </javac>
    
    <copy todir="${gleany.output.dir}">
      <fileset dir="${module.gleany.basedir}/../gleany/gleany/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>
  
  <target name="compile.module.gleany.tests" depends="compile.module.gleany.production" description="compile module gleany; test classes" unless="skip.tests"/>
  
  <target name="clean.module.gleany" description="cleanup module">
    <delete dir="${gleany.output.dir}"/>
    <delete dir="${gleany.testoutput.dir}"/>
  </target>
  
  
  <!-- Module whatever -->
  
  <dirname property="module.whatever.basedir" file="${ant.file}"/>
  
  
  <property name="module.jdk.home.whatever" value="${jdk.home.1.7}"/>
  <property name="module.jdk.bin.whatever" value="${jdk.bin.1.7}"/>
  <property name="module.jdk.classpath.whatever" value="jdk.classpath.1.7"/>
  
  <property name="compiler.args.whatever" value="${compiler.args}"/>
  
  <property name="whatever.output.dir" value="${module.whatever.basedir}/out/production/whatever"/>
  <property name="whatever.testoutput.dir" value="${module.whatever.basedir}/out/test/whatever"/>
  
  <path id="whatever.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="whatever.module.production.classpath">
    <path refid="${module.jdk.classpath.whatever}"/>
    <pathelement location="${gleany.output.dir}"/>
    <path refid="library.libs.classpath"/>
    <path refid="library.scala-compiler.classpath"/>
    <path refid="library.scala-library.classpath"/>
    <fileset dir="${basedir}/lib">
      <patternset refid="library.patterns"/>
    </fileset>
  </path>
  
  <path id="whatever.runtime.production.module.classpath">
    <pathelement location="${whatever.output.dir}"/>
    <path refid="gleany.runtime.production.module.classpath"/>
    <path refid="library.libs.classpath"/>
    <path refid="library.scala-compiler.classpath"/>
    <path refid="library.scala-library.classpath"/>
    <fileset dir="${basedir}/lib">
      <patternset refid="library.patterns"/>
    </fileset>
  </path>
  
  <path id="whatever.module.classpath">
    <path refid="${module.jdk.classpath.whatever}"/>
    <pathelement location="${whatever.output.dir}"/>
    <pathelement location="${gleany.testoutput.dir}"/>
    <pathelement location="${gleany.output.dir}"/>
    <path refid="library.libs.classpath"/>
    <path refid="library.scala-compiler.classpath"/>
    <path refid="library.scala-library.classpath"/>
    <fileset dir="${basedir}/lib">
      <patternset refid="library.patterns"/>
    </fileset>
  </path>
  
  <path id="whatever.runtime.module.classpath">
    <pathelement location="${whatever.testoutput.dir}"/>
    <pathelement location="${whatever.output.dir}"/>
    <path refid="gleany.runtime.module.classpath"/>
    <path refid="library.libs.classpath"/>
    <path refid="library.scala-compiler.classpath"/>
    <path refid="library.scala-library.classpath"/>
    <fileset dir="${basedir}/lib">
      <patternset refid="library.patterns"/>
    </fileset>
  </path>
  
  
  <patternset id="excluded.from.module.whatever">
    <patternset refid="ignored.files"/>
  </patternset>
  
  <patternset id="excluded.from.compilation.whatever">
    <patternset refid="excluded.from.module.whatever"/>
  </patternset>
  
  <path id="whatever.module.sourcepath">
    <dirset dir="${module.whatever.basedir}">
      <include name="src"/>
      <include name="assets"/>
      <include name="data"/>
      <include name="shaders"/>
    </dirset>
  </path>
  
  
  <target name="compile.module.whatever" depends="compile.module.whatever.production,compile.module.whatever.tests" description="Compile module whatever"/>
  
  <target name="compile.module.whatever.production" depends="compile.module.gleany" description="Compile module whatever; production classes">
    <mkdir dir="${whatever.output.dir}"/>
    <javac destdir="${whatever.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true" executable="${module.jdk.bin.whatever}/javac">
      <compilerarg line="${compiler.args.whatever}"/>
      <bootclasspath refid="whatever.module.bootclasspath"/>
      <classpath refid="whatever.module.production.classpath"/>
      <src refid="whatever.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.whatever"/>
    </javac>
    
    <copy todir="${whatever.output.dir}">
      <fileset dir="${module.whatever.basedir}/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
      <fileset dir="${module.whatever.basedir}/assets">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
      <fileset dir="${module.whatever.basedir}/data">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
      <fileset dir="${module.whatever.basedir}/shaders">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>
  
  <target name="compile.module.whatever.tests" depends="compile.module.whatever.production" description="compile module whatever; test classes" unless="skip.tests"/>
  
  <target name="clean.module.whatever" description="cleanup module">
    <delete dir="${whatever.output.dir}"/>
    <delete dir="${whatever.testoutput.dir}"/>
  </target>
  
  
  <!-- Module whatever-server -->
  
  <dirname property="module.whatever-server.basedir" file="${ant.file}"/>
  
  
  <property name="module.jdk.home.whatever-server" value="${project.jdk.home}"/>
  <property name="module.jdk.bin.whatever-server" value="${project.jdk.bin}"/>
  <property name="module.jdk.classpath.whatever-server" value="${project.jdk.classpath}"/>
  
  <property name="compiler.args.whatever-server" value="${compiler.args}"/>
  
  <property name="whatever-server.output.dir" value="${module.whatever-server.basedir}/out/production/whatever-server"/>
  <property name="whatever-server.testoutput.dir" value="${module.whatever-server.basedir}/out/test/whatever-server"/>
  
  <path id="whatever-server.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="whatever-server.module.production.classpath">
    <path refid="${module.jdk.classpath.whatever-server}"/>
    <path refid="library.scala-library.classpath"/>
    <pathelement location="${gleany.output.dir}"/>
    <path refid="library.libs.classpath"/>
  </path>
  
  <path id="whatever-server.runtime.production.module.classpath">
    <pathelement location="${whatever-server.output.dir}"/>
    <path refid="library.scala-library.classpath"/>
    <path refid="gleany.runtime.production.module.classpath"/>
    <path refid="library.libs.classpath"/>
  </path>
  
  <path id="whatever-server.module.classpath">
    <path refid="${module.jdk.classpath.whatever-server}"/>
    <pathelement location="${whatever-server.output.dir}"/>
    <path refid="library.scala-library.classpath"/>
    <pathelement location="${gleany.testoutput.dir}"/>
    <pathelement location="${gleany.output.dir}"/>
    <path refid="library.libs.classpath"/>
  </path>
  
  <path id="whatever-server.runtime.module.classpath">
    <pathelement location="${whatever-server.testoutput.dir}"/>
    <pathelement location="${whatever-server.output.dir}"/>
    <path refid="library.scala-library.classpath"/>
    <path refid="gleany.runtime.module.classpath"/>
    <path refid="library.libs.classpath"/>
  </path>
  
  
  <patternset id="excluded.from.module.whatever-server">
    <patternset refid="ignored.files"/>
  </patternset>
  
  <patternset id="excluded.from.compilation.whatever-server">
    <patternset refid="excluded.from.module.whatever-server"/>
  </patternset>
  
  <path id="whatever-server.module.sourcepath">
    <dirset dir="${module.whatever-server.basedir}/../whatever-server">
      <include name="src"/>
    </dirset>
  </path>
  
  
  <target name="compile.module.whatever-server" depends="compile.module.whatever-server.production,compile.module.whatever-server.tests" description="Compile module whatever-server"/>
  
  <target name="compile.module.whatever-server.production" depends="compile.module.gleany" description="Compile module whatever-server; production classes">
    <mkdir dir="${whatever-server.output.dir}"/>
    <javac destdir="${whatever-server.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true" executable="${module.jdk.bin.whatever-server}/javac">
      <compilerarg line="${compiler.args.whatever-server}"/>
      <bootclasspath refid="whatever-server.module.bootclasspath"/>
      <classpath refid="whatever-server.module.production.classpath"/>
      <src refid="whatever-server.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.whatever-server"/>
    </javac>
    
    <copy todir="${whatever-server.output.dir}">
      <fileset dir="${module.whatever-server.basedir}/../whatever-server/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>
  
  <target name="compile.module.whatever-server.tests" depends="compile.module.whatever-server.production" description="compile module whatever-server; test classes" unless="skip.tests"/>
  
  <target name="clean.module.whatever-server" description="cleanup module">
    <delete dir="${whatever-server.output.dir}"/>
    <delete dir="${whatever-server.testoutput.dir}"/>
  </target>
  
  <target name="init" description="Build initialization">
    <!-- Perform any build initialization in this target -->
  </target>
  
  <target name="clean" depends="clean.module.gleany, clean.module.whatever, clean.module.whatever-server" description="cleanup all"/>
  
  <target name="build.modules" depends="init, clean, compile.module.gleany, compile.module.whatever, compile.module.whatever-server" description="build all modules"/>
  
  <target name="init.artifacts">
    <property name="artifacts.temp.dir" value="${basedir}/__artifacts_temp"/>
    <property name="artifact.output.whatever-server:jar" value="${basedir}/out/artifacts/whatever_server_jar"/>
    <property name="artifact.output.whatever:jar" value="${basedir}/out/artifacts/whatever_jar"/>
    <mkdir dir="${artifacts.temp.dir}"/>
    <property name="temp.jar.path.whatever-server.jar" value="${artifacts.temp.dir}/whatever-server.jar"/>
    <property name="temp.jar.path.whatever.jar" value="${artifacts.temp.dir}/whatever.jar"/>
  </target>
  
  <target name="artifact.whatever-server:jar" depends="init.artifacts, compile.module.whatever-server, compile.module.whatever, compile.module.gleany" description="Build &#39;whatever-server:jar&#39; artifact">
    <property name="artifact.temp.output.whatever-server:jar" value="${artifacts.temp.dir}/whatever_server_jar"/>
    <mkdir dir="${artifact.temp.output.whatever-server:jar}"/>
    <jar destfile="${temp.jar.path.whatever-server.jar}" duplicate="preserve" filesetmanifest="mergewithoutmain">
      <zipfileset dir="${whatever-server.output.dir}"/>
      <zipfileset dir="${whatever.output.dir}"/>
      <zipfileset dir="${gleany.output.dir}"/>
      <zipfileset src="${basedir}/../../../../../Program Files (x86)/scala/lib/scala-actors.jar"/>
      <zipfileset src="${basedir}/../../../../../Program Files (x86)/scala/lib/scala-library.jar"/>
      <zipfileset src="${basedir}/../../../../../Program Files (x86)/scala/lib/scala-swing.jar"/>
      <zipfileset src="${basedir}/../../../../../Program Files (x86)/scala/lib/scala-compiler.jar"/>
      <zipfileset src="${basedir}/../../../../../Program Files (x86)/scala/lib/scala-reflect.jar"/>
      <zipfileset src="${basedir}/../gleany/gleany/libs/gdx.jar"/>
      <zipfileset src="${basedir}/../gleany/gleany/libs/gdx-natives.jar"/>
      <zipfileset src="${basedir}/../gleany/gleany/libs/gdx-sources.jar"/>
      <zipfileset src="${basedir}/../gleany/gleany/libs/gdx-freetype.jar"/>
      <zipfileset src="${basedir}/../gleany/gleany/libs/gdx-controllers.jar"/>
      <zipfileset src="${basedir}/../gleany/gleany/libs/gdx-backend-lwjgl.jar"/>
      <zipfileset src="${basedir}/../gleany/gleany/libs/gdx-freetype-natives.jar"/>
      <zipfileset src="${basedir}/../gleany/gleany/libs/gdx-freetype-sources.jar"/>
      <zipfileset src="${basedir}/../gleany/gleany/libs/gdx-controllers-desktop.jar"/>
      <zipfileset src="${basedir}/../gleany/gleany/libs/gdx-controllers-sources.jar"/>
      <zipfileset src="${basedir}/../gleany/gleany/libs/gdx-backend-lwjgl-natives.jar"/>
      <zipfileset src="${basedir}/../gleany/gleany/libs/gdx-backend-lwjgl-sources.jar"/>
      <zipfileset src="${basedir}/../gleany/gleany/libs/gdx-controllers-desktop-natives.jar"/>
      <zipfileset src="${basedir}/../gleany/gleany/libs/gdx-controllers-desktop-sources.jar"/>
    </jar>
    <copy file="${temp.jar.path.whatever-server.jar}" tofile="${artifact.temp.output.whatever-server:jar}/whatever-server.jar"/>
  </target>
  
  <target name="artifact.whatever:jar" depends="init.artifacts, compile.module.whatever, compile.module.gleany" description="Build &#39;whatever:jar&#39; artifact">
    <property name="artifact.temp.output.whatever:jar" value="${artifacts.temp.dir}/whatever_jar"/>
    <mkdir dir="${artifact.temp.output.whatever:jar}"/>
    <jar destfile="${temp.jar.path.whatever.jar}" duplicate="preserve" filesetmanifest="mergewithoutmain">
      <zipfileset dir="${whatever.output.dir}"/>
      <zipfileset dir="${gleany.output.dir}"/>
      <zipfileset src="${basedir}/../gleany/gleany/libs/gdx.jar"/>
      <zipfileset src="${basedir}/../gleany/gleany/libs/gdx-natives.jar"/>
      <zipfileset src="${basedir}/../gleany/gleany/libs/gdx-sources.jar"/>
      <zipfileset src="${basedir}/../gleany/gleany/libs/gdx-freetype.jar"/>
      <zipfileset src="${basedir}/../gleany/gleany/libs/gdx-controllers.jar"/>
      <zipfileset src="${basedir}/../gleany/gleany/libs/gdx-backend-lwjgl.jar"/>
      <zipfileset src="${basedir}/../gleany/gleany/libs/gdx-freetype-natives.jar"/>
      <zipfileset src="${basedir}/../gleany/gleany/libs/gdx-freetype-sources.jar"/>
      <zipfileset src="${basedir}/../gleany/gleany/libs/gdx-controllers-desktop.jar"/>
      <zipfileset src="${basedir}/../gleany/gleany/libs/gdx-controllers-sources.jar"/>
      <zipfileset src="${basedir}/../gleany/gleany/libs/gdx-backend-lwjgl-natives.jar"/>
      <zipfileset src="${basedir}/../gleany/gleany/libs/gdx-backend-lwjgl-sources.jar"/>
      <zipfileset src="${basedir}/../gleany/gleany/libs/gdx-controllers-desktop-natives.jar"/>
      <zipfileset src="${basedir}/../gleany/gleany/libs/gdx-controllers-desktop-sources.jar"/>
      <zipfileset src="${basedir}/../../../../../Program Files (x86)/scala/lib/scala-actors.jar"/>
      <zipfileset src="${basedir}/../../../../../Program Files (x86)/scala/lib/scala-library.jar"/>
      <zipfileset src="${basedir}/../../../../../Program Files (x86)/scala/lib/scala-swing.jar"/>
      <zipfileset src="${basedir}/../../../../../Program Files (x86)/scala/lib/scala-compiler.jar"/>
      <zipfileset src="${basedir}/../../../../../Program Files (x86)/scala/lib/scala-reflect.jar"/>
    </jar>
    <copy file="${temp.jar.path.whatever.jar}" tofile="${artifact.temp.output.whatever:jar}/whatever.jar"/>
  </target>
  
  <target name="build.all.artifacts" depends="artifact.whatever-server:jar, artifact.whatever:jar" description="Build all artifacts">
    <mkdir dir="${artifact.output.whatever-server:jar}"/>
    <copy todir="${artifact.output.whatever-server:jar}">
      <fileset dir="${artifact.temp.output.whatever-server:jar}"/>
    </copy>
    <mkdir dir="${artifact.output.whatever:jar}"/>
    <copy todir="${artifact.output.whatever:jar}">
      <fileset dir="${artifact.temp.output.whatever:jar}"/>
    </copy>
    
    <!-- Delete temporary files -->
    <delete dir="${artifacts.temp.dir}"/>
  </target>
  
  <target name="all" depends="build.modules, build.all.artifacts" description="build all"/>
</project>