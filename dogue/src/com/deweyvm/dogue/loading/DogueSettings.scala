package com.deweyvm.dogue.loading

import com.deweyvm.dogue.Game
import com.deweyvm.dogue.common.logging.Log


object DogueSettings {
  def load():DogueSettings = {
    new DogueSettings(RawDogueSettings.fromFile())
  }

  def makeDefault:RawDogueSettings = {
    val settings = new DogueSettings(new RawDogueSettings)
    settings.raw
  }

  def flush() {
    Game.settings.flush()
  }
}

object Setting {
  def intSetting(raw:RawDogueSettings, name:String, default:Int, min:Int, max:Int)(description:String) =
    Setting(raw, name, description, default, new IntVerifier(name, default, min, max))

  def stringSetting(raw:RawDogueSettings, name:String, default:String)(description:String) =
    Setting(raw, name, description, default, new StringVerifier(name, default))
}

case class Setting[T](raw:RawDogueSettings, name:String, description:String, default:T, verifier:Verifier[T])(implicit ev: scala.reflect.ClassTag[T]) {
  private val loadedValue = {
    classOf[RawDogueSettings].getField(name).get(raw).asInstanceOf[T]
  }
  private var value = verifier(loadedValue)



  def get = value
  def set(t:T) {
    value = verifier(t)
    DogueSettings.flush()
  }
}

trait Verifier[T] {
  def name:String
  def apply(input:T):T
}

class IntVerifier(idName:String, default:Int, min:Int, max:Int) extends Verifier[Int] {
  def name = idName
  def apply(input:Int):Int = {
    if (input == 0) {
      default
    } else if (input < min) {
      min
    } else if (input > max) {
      max
    } else {
      input
    }
  }

}

class StringVerifier(strName:String, default:String) extends Verifier[String] {
  def name = strName
  def apply(input:String):String = {
    //fixme, dont let null get here
    if (input == null || input.isEmpty || input.trim().isEmpty) {
      default
    } else {
      input
    }

  }
}

class DogueSettings(private val raw:RawDogueSettings) {
  val maxPongWait = Setting.intSetting(raw, "maxPongWait", 120, 30, 600)(
    "The number of seconds the client will wait before considering the server nonresponsive."
  )
  val pingCheckFrequency = Setting.intSetting(raw, "pingCheckFrequency", 6, 4, 10)(
    "The number of seconds to sleep between checking for pong messages."
  )
  val pingFrequency = Setting.intSetting(raw, "pingFrequency", 90, 60, 600)(
    "The number of seconds between pings to the server."
  )

  val username = Setting.stringSetting(raw, "username", "")(
    "The username to connect with. If this field is absent or blank, a name will be generated."
  )

  val password = Setting.stringSetting(raw, "password", "")(
    "The password associated with the given username. This is randomly generated by the server and may not be changed."
  )

  val port = Setting.intSetting(raw, "port", 4815, 1024, 49150)(
    "The port to use to connect to the game server. This should generally not be changed."
  )

  val host = Setting.stringSetting(raw, "host", "dogue.in")(
    "Host name of the server to connect to."
  )

  val logLocation = Setting.stringSetting(raw, "logLocation", "logs")(
    "The location of runtime logs."
  )



  private def flush() {
    raw.username = username.get
    raw.port = port.get
    raw.password = password.get
    raw.host = host.get
    raw.pingFrequency = pingFrequency.get
    raw.pingCheckFrequency = pingCheckFrequency.get
    raw.maxPongWait = maxPongWait.get
    raw.flush()
  }

}
