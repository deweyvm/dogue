package com.deweyvm.dogue.entities

import com.deweyvm.gleany.graphics.Color
import com.deweyvm.dogue.graphics.GlyphFactory
import scala.collection.mutable.ArrayBuffer

//code page 437
//uppercase special characters are suffixed with _u due to the possible error
// "Code$Ä$ differs only in case from Code$ä$. Such classes will overwrite one
// another on case-insensitive filesystems."

object Code {
  val All = ArrayBuffer[Code]()
  val ☺   = Code(1, "☺")
  val ☻   = Code(2, "☻")
  val ♥   = Code(3, "♥")
  val ♦   = Code(4, "♦")
  val ♣   = Code(5, "♣")
  val ♠   = Code(6, "♠")
  val ●   = Code(7, "●")
  val ◘   = Code(8, "◘")
  val ◦   = Code(9, "◦")
  val ◙   = Code(10, "◙")
  val ♂   = Code(11, "♂")
  val ♀   = Code(12, "♀")
  val ♪   = Code(13, "♪")
  val ♫   = Code(14, "♫")
  val ☼   = Code(15, "☼")
  val ►   = Code(16, "►")
  val ◄   = Code(17, "◄")
  val ↕   = Code(18, "↕")
  val `‼` = Code(19, "‼")
  val ¶   = Code(20, "¶")
  val §   = Code(21, "§")
  val `‗` = Code(22, "‗")
  val ↨   = Code(23, "↨")
  val ↑   = Code(24, "↑")
  val ↓   = Code(25, "↓")
  val →   = Code(26, "→")
  val `←` = Code(27, "←")
  val ∟   = Code(28, "∟")
  val ↔   = Code(29, "↔")
  val ▲   = Code(30, "▲")
  val ▼   = Code(31, "▼")
  val ` ` = Code(32, " ")
  val !   = Code(33, "!")
  val `"` = Code(34, "\"")
  val `#` = Code(35, "#")
  val $   = Code(36, "$")
  val %   = Code(37, "%")
  val &   = Code(38, "&")
  val `'` = Code(39, "'")
  val `(` = Code(40, "(")
  val `)` = Code(41, ")")
  val *   = Code(42, "*")
  val +   = Code(43, "+")
  val `,` = Code(44, ",")
  val -   = Code(45, "-")
  val `.` = Code(46, ".")
  val /   = Code(47, "/")
  val `0` = Code(48, "0")
  val `1` = Code(49, "1")
  val `2` = Code(50, "2")
  val `3` = Code(51, "3")
  val `4` = Code(52, "4")
  val `5` = Code(53, "5")
  val `6` = Code(54, "6")
  val `7` = Code(55, "7")
  val `8` = Code(56, "8")
  val `9` = Code(57, "9")
  val `:` = Code(58, ":")
  val `;` = Code(59, ";")
  val <   = Code(60, "<")
  val `=` = Code(61, "=")
  val >   = Code(62, ">")
  val ?   = Code(63, "?")
  val `@` = Code(64, "@")
  val A   = Code(65, "A")
  val B   = Code(66, "B")
  val C   = Code(67, "C")
  val D   = Code(68, "D")
  val E   = Code(69, "E")
  val F   = Code(70, "F")
  val G   = Code(71, "G")
  val H   = Code(72, "H")
  val I   = Code(73, "I")
  val J   = Code(74, "J")
  val K   = Code(75, "K")
  val L   = Code(76, "L")
  val M   = Code(77, "M")
  val N   = Code(78, "N")
  val O   = Code(79, "O")
  val P   = Code(80, "P")
  val Q   = Code(81, "Q")
  val R   = Code(82, "R")
  val S   = Code(83, "S")
  val T   = Code(84, "T")
  val U   = Code(85, "U")
  val V   = Code(86, "V")
  val W   = Code(87, "W")
  val X   = Code(88, "X")
  val Y   = Code(89, "Y")
  val Z   = Code(90, "Z")
  val `[` = Code(91, "[")
  val \   = Code(92, "\\")
  val `]` = Code(93, "]")
  val ^   = Code(94, "^")
  val underscore = Code(95, "_")
  val grave = Code(96, "`")
  val a   = Code(97, "a")
  val b   = Code(98, "b")
  val c   = Code(99, "c")
  val d   = Code(100, "d")
  val e   = Code(101, "e")
  val f   = Code(102, "f")
  val g   = Code(103, "g")
  val h   = Code(104, "h")
  val i   = Code(105, "i")
  val j   = Code(106, "j")
  val k   = Code(107, "k")
  val l   = Code(108, "l")
  val m   = Code(109, "m")
  val n   = Code(110, "n")
  val o   = Code(111, "o")
  val p   = Code(112, "p")
  val q   = Code(113, "q")
  val r   = Code(114, "r")
  val s   = Code(115, "s")
  val t   = Code(116, "t")
  val u   = Code(117, "u")
  val v   = Code(118, "v")
  val w   = Code(119, "w")
  val x   = Code(120, "x")
  val y   = Code(121, "y")
  val z   = Code(122, "z")
  val `{` = Code(123, "{")
  val |   = Code(124, "|")
  val `}` = Code(125, "}")
  val ~   = Code(126, "~")
  val ⌂   = Code(127, "⌂")
  val Ç_u = Code(128, "Ç")
  val ü   = Code(129, "ü")
  val é   = Code(130, "é")
  val â   = Code(131, "â")
  val ä   = Code(132, "ä")
  val à   = Code(133, "à")
  val å   = Code(134, "å")
  val ç   = Code(135, "ç")
  val ê   = Code(136, "ê")
  val ë   = Code(137, "ë")
  val è   = Code(138, "è")
  val ï   = Code(139, "ï")
  val î   = Code(140, "î")
  val ì   = Code(141, "ì")
  val Ä_u = Code(142, "Ä")
  val Å_u = Code(143, "Å")
  val É_u = Code(144, "É")
  val æ   = Code(145, "æ")
  val Æ_u = Code(146, "Æ")
  val ô   = Code(147, "ô")
  val ö   = Code(148, "ö")
  val ò   = Code(149, "ò")
  val û   = Code(150, "û")
  val ù   = Code(151, "ù")
  val ÿ   = Code(152, "ÿ")
  val Ö_u = Code(153, "Ö")
  val Ü_u = Code(154, "Ü")
  val `¢` = Code(155, "¢")
  val `£` = Code(156, "£")
  val `¥` = Code(157, "¥")
  val `₧` = Code(158, "₧")
  val ƒ   = Code(159, "ƒ")
  val á   = Code(160, "á")
  val í   = Code(161, "í")
  val ó   = Code(162, "ó")
  val ú   = Code(163, "ú")
  val ñ   = Code(164, "ñ")
  val Ñ_u = Code(165, "Ñ")
  val ª   = Code(166, "ª")
  val º   = Code(167, "º")
  val `¿` = Code(168, "¿")
  val ⌐   = Code(169, "⌐")
  val ¬   = Code(170, "¬")
  val `½` = Code(171, "½")
  val `¼` = Code(172, "¼")
  val `¡` = Code(173, "¡")
  val `«` = Code(174, "«")
  val `»` = Code(175, "»")
  val ░   = Code(176, "░")
  val ▒   = Code(177, "▒")
  val ▓   = Code(178, "▓")
  val │   = Code(179, "│")
  val ┤   = Code(180, "┤")
  val ╡   = Code(181, "╡")
  val ╢   = Code(182, "╢")
  val ╖   = Code(183, "╖")
  val ╕   = Code(184, "╕")
  val ╣   = Code(185, "╣")
  val ║   = Code(186, "║")
  val ╗   = Code(187, "╗")
  val ╝   = Code(188, "╝")
  val ╜   = Code(189, "╜")
  val ╛   = Code(190, "╛")
  val ┐   = Code(191, "┐")
  val └   = Code(192, "└")
  val ┴   = Code(193, "┴")
  val ┬   = Code(194, "┬")
  val ├   = Code(195, "├")
  val ─   = Code(196, "─")
  val ┼   = Code(197, "┼")
  val ╞   = Code(198, "╞")
  val ╟   = Code(199, "╟")
  val ╚   = Code(200, "╚")
  val ╔   = Code(201, "╔")
  val ╩   = Code(202, "╩")
  val ╦   = Code(203, "╦")
  val ╠   = Code(204, "╠")
  val ═   = Code(205, "═")
  val ╬   = Code(206, "╬")
  val ╧   = Code(207, "╧")
  val ╨   = Code(208, "╨")
  val ╤   = Code(209, "╤")
  val ╥   = Code(210, "╥")
  val ╙   = Code(211, "╙")
  val ╘   = Code(212, "╘")
  val ╒   = Code(213, "╒")
  val ╓   = Code(214, "╓")
  val ╫   = Code(215, "╫")
  val ╪   = Code(216, "╪")
  val ┘   = Code(217, "┘")
  val ┌   = Code(218, "┌")
  val █   = Code(219, "█")
  val ▄   = Code(220, "▄")
  val ▌   = Code(221, "▌")
  val ▐   = Code(222, "▐")
  val ▀   = Code(223, "▀")
  val α   = Code(224, "α")
  val β   = Code(225, "β")
  val Γ   = Code(226, "Γ")
  val π   = Code(227, "π")
  val Σ_u = Code(228, "Σ")
  val σ   = Code(229, "σ")
  val μ   = Code(230, "μ")
  val τ   = Code(231, "τ")
  val Φ   = Code(232, "Φ")
  val Θ   = Code(233, "Θ")
  val Ω   = Code(234, "Ω")
  val δ   = Code(235, "δ")
  val ∞   = Code(236, "∞")
  val φ   = Code(237, "φ")
  val ϵ   = Code(238, "ϵ")
  val ∩   = Code(239, "∩")
  val ≡   = Code(240, "≡")
  val ±   = Code(241, "±")
  val ≥   = Code(242, "≥")
  val ≤   = Code(243, "≤")
  val ⌠   = Code(244, "⌠")
  val ⌡   = Code(245, "⌡")
  val ÷   = Code(246, "÷")
  val ≈   = Code(247, "≈")
  val °   = Code(248, "°")
  val ▪   = Code(249, "▪")
  val `·` = Code(250, "·")
  val √   = Code(251, "√")
  val ⁿ   = Code(252, "ⁿ")
  val `²` = Code(253, "²")
  val ■   = Code(254, "■")
}

case class Code(index:Int, char:String="?") {
  if (Code.All.length < 255) {
    Code.All += this
    ()
  }

  def rawString = index.toChar.toString
  def makeTile(bgColor:Color, fgColor:Color, factory:GlyphFactory) = {
    new Tile(bgColor, fgColor, index, factory)
  }
}
